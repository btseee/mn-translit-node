name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  test-matrix:
    name: Test on Node ${{ matrix.node-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        node-version: ['14.x', '16.x', '18.x', '20.x', '22.x']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          - os: macos-latest
            node-version: '14.x'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          if [ "${{ matrix.node-version }}" = "14.x" ]; then
            npm install
          else
            npm ci
          fi
        shell: bash

      - name: Build package
        run: npm run build

      - name: Run tests
        run: npm run test:all

  publish-npm:
    name: Publish to NPM
    needs: test-matrix
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $TAG_VERSION"

      - name: Update package.json version
        run: npm version ${{ steps.extract_version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github:
    name: Publish to GitHub Packages
    needs: test-matrix
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@btseee'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $TAG_VERSION"

      - name: Update package.json version
        run: npm version ${{ steps.extract_version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Configure package for GitHub
        run: |
          jq '.name = "@btseee/mn-translit"' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [publish-npm, publish-github]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version and tag info
        id: version_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${{ steps.version_info.outputs.tag_name }})
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.version_info.outputs.tag_name }})
          fi
          
          # Save changelog to file to handle multiline output
          echo "$CHANGELOG" > changelog.txt
          
          # Create release notes
          {
            echo "## Changes"
            echo ""
            cat changelog.txt
            echo ""
            echo "## Installation"
            echo ""
            echo "\`\`\`bash"
            echo "npm install mn-translit@${{ steps.version_info.outputs.version }}"
            echo "\`\`\`"
            echo ""
            echo "## Node.js Compatibility"
            echo ""
            echo "This package supports Node.js versions: 14.x, 16.x, 18.x, 20.x, 22.x"
            echo ""
            echo "Tested on: Ubuntu, Windows, and macOS"
          } > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version_info.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version_info.outputs.tag_name, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
